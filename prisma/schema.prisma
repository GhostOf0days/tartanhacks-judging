// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Prize {
    id          String  @id @default(cuid()) @map("_id")
    helixId     String
    name        String
    description String
    eligibility String?
    provider    String?

    judgeAssignments JudgePrizeAssignment[]
    projectRelations ProjectPrizeRelation[]

    @@unique([helixId])
}

model Project {
    id          String @id @default(cuid()) @map("_id")
    helixId     String
    name        String
    description String
    location    String
    team        String

    leadingPrizes  JudgePrizeAssignment[]
    prizeRelations ProjectPrizeRelation[]

    @@unique([helixId])
}

model ProjectPrizeRelation {
    id        String @id @default(cuid()) @map("_id")
    projectId String
    prizeId   String

    project Project @relation(fields: [projectId], references: [id])
    prize   Prize   @relation(fields: [prizeId], references: [id])

    @@unique([projectId, prizeId])
}

model JudgePrizeAssignment {
    id               String  @id @default(cuid()) @map("_id")
    email            String
    prizeId          String
    prize            Prize   @relation(fields: [prizeId], references: [id])
    leadingProjectId String
    leadingProject   Project @relation(fields: [leadingProjectId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([email, prizeId])
}

// Next Auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
