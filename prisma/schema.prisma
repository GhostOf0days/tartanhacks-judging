// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Judges compare different projects and have some associated priors (alpha, beta)
model Judge {
    id            String  @id @default(cuid()) @map("_id")
    helixId       String
    email         String
    alpha         Float
    beta          Float
    nextProjectId String
    nextProject   Project @relation(fields: [nextProjectId], references: [id])

    prizeAssignments JudgePrizeAssignment[]
    ignoredProjects  IgnoreProjects[]
    judgments        ProjectComparisonResult[]

    updatedAt DateTime @updatedAt

    @@unique([helixId])
}

// Projects can be submitted towards different prizes over which they are judged for
model Prize {
    id          String  @id @default(cuid()) @map("_id")
    helixId     String
    name        String
    description String
    eligibility String?
    provider    String?

    judgeAssignments JudgePrizeAssignment[]
    judgingInstances JudgingInstance[]
    judgments        ProjectComparisonResult[]

    @@unique([helixId])
}

// Projects are compared against each other by judges
model Project {
    id          String @id @default(cuid()) @map("_id")
    helixId     String
    name        String
    description String
    location    String
    team        String

    leadingPrizes    JudgePrizeAssignment[]
    incomingJudges   Judge[]
    judgingInstances JudgingInstance[]
    ignores          IgnoreProjects[]

    wins   ProjectComparisonResult[] @relation(name: "Winning project")
    losses ProjectComparisonResult[] @relation(name: "Losing project")

    @@unique([helixId])
}

// A judgment (comparison) of two projects by a judge for a specific prize
model ProjectComparisonResult {
    id               String @id @default(cuid()) @map("_id")
    judgeId          String
    prizeId          String
    winningProjectId String
    losingProjectId  String

    judge Judge @relation(fields: [judgeId], references: [id])
    prize Prize @relation(fields: [prizeId], references: [id])

    winningProject Project @relation(name: "Winning project", fields: [winningProjectId], references: [id])
    losingProject  Project @relation(name: "Losing project", fields: [losingProjectId], references: [id])
}

// Ignore projects that have already been seen by the judge
// Separate from JudgingInstance to account for skips
model IgnoreProjects {
    id        String @id @default(cuid()) @map("_id")
    judgeId   String
    projectId String

    judge   Judge   @relation(fields: [judgeId], references: [id])
    project Project @relation(fields: [projectId], references: [id])
}

// Information tied to a project-prize tuple used to determine ranking
model JudgingInstance {
    id          String @id @default(cuid()) @map("_id")
    prizeId     String
    projectId   String
    timesJudged Int    @default(0)

    prize   Prize   @relation(fields: [prizeId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    mu     Float @default(0)
    sigma2 Float @default(0)

    @@unique([projectId, prizeId])
}

// Assignments of judges to prizes
model JudgePrizeAssignment {
    id               String @id @default(cuid()) @map("_id")
    email            String
    prizeId          String
    leadingProjectId String

    prize          Prize   @relation(fields: [prizeId], references: [id])
    leadingProject Project @relation(fields: [leadingProjectId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Judge     Judge?   @relation(fields: [judgeId], references: [id])
    judgeId   String?

    @@unique([email, prizeId])
}
